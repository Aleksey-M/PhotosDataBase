@page "/images"

@using PhotosDB.Data
@using System.Diagnostics

@inject IJSRuntime JS
@inject LiteDbService Database

<h4>Добавленные фото (@_images.Count из @_photosCount)</h4>

<PagerComponent PhotosCount="_photosCount" OpenPageAction="OpenPage" CurrentPage="_currentPage" />

<div class="row">
    @foreach (var (img, thmb) in Images)
    {
        <div class="col-4" style="margin-top:5px;">
            <div class="card" style="padding-top:5px">
                <a @onclick="async _ => await OpenImage(img.FileNameFull)"><img class="img-thumbnail" style="display:block; margin:auto; cursor:pointer" src="data:image/jpg;base64,@thmb" /> </a>
                <div class="card-body">
                    <ul class="small" style="list-style-type: none;">
                        <li>@img.FileNameFull (@(img.Width?.ToString() ?? "NA") / @(img.Height?.ToString() ?? "NA")) 
                            <button type="button" @onclick="_ => DeleteImage(img.ImageFileInfoId)" class="close" style="display:inline;color:red" title="Удалить фото из базы">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </li>
                        <li>Снято <i style="color:blue">@(img.TakenDate?.ToString("yyyy.MM.dd hh:mm:ss") ?? "NA")</i> на <i style="color:blue">@(img.CameraModel ?? "NA")</i></li>
                        <li><b>File CD:</b> @img.FileCreatedDate.ToString("yyyy.MM.dd hh:mm:ss")</li>
                        <li><b>File MD:</b> @img.FileModifiedDate.ToString("yyyy.MM.dd hh:mm:ss")</li>
                        <li><b>Added:</b> @img.AddToBaseDate.ToString("yyyy.MM.dd hh:mm:ss")</li>
                    </ul>
                </div>
            </div>
        </div>
    }
</div>

<PagerComponent PhotosCount="_photosCount" OpenPageAction="OpenPage" CurrentPage="_currentPage" />

@code {

    private List<ImageFileInfo> _images;
    private int _currentPage = 1;
    private int _photosCount;

    private IEnumerable<(ImageFileInfo fInfo, string img)> Images
    {
        get
        {
            foreach (var i in _images)
            {
                var b64 = Convert.ToBase64String(i.PhotoPreview);
                yield return (i, b64);
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitializedAsync();
        _photosCount = Database.GetImagesCount();

        _images = Database.GetImages(0, PagerComponent.IMAGES_PER_PAGE);
    }

    private async ValueTask OpenImage(string imgNameFull)
    {
        try
        {
            new Process
            {
                StartInfo = new ProcessStartInfo(imgNameFull)
                {
                    UseShellExecute = true
                }
            }.Start();
        }
        catch(Exception exc)
        {
            await JS.InvokeVoidAsync("window.alert", exc.Message);
        }
    }

    private void OpenPage(int startIndex, int photosCount, int currentPage)
    {
        _photosCount = Database.GetImagesCount();
        _images = Database.GetImages(startIndex, photosCount);
        _currentPage = currentPage;
        StateHasChanged();
    }

    private void DeleteImage(Guid imageId)
    {
        Database.DeleteImage(imageId);
        _images.Remove(_images.Single(i => i.ImageFileInfoId == imageId));
        _photosCount = Database.GetImagesCount();
    }
}
