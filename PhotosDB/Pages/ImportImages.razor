@page "/importimages"

@using PhotosDB.Data
@using System.Threading
@using System.IO

@inject ImagesReader Reader
@inject LiteDbService Database

<div class="text-center">
    <h3>Load Photos into database</h3>
    <div class="text-center"><h5 class="text-danger">@_errorMessage</h5></div>
    <div class="form-inline" style="margin:10px auto; width:520px;">
        <input @bind-value="_searchDir" type="text" placeholder="Folder with photos" class="form-control" style="margin-right:10px; width:300px;" disabled="@Working" />
        <button @onclick="_ => Start(false)" type="button" class="btn btn-info" style="margin-right:10px; width:120px;" disabled="@Working">Load Photos</button>
        <button @onclick="Cancel" type="button" class="btn btn-warning" disabled="@(!Working)" style="width:70px;">Cancel</button>
    </div>

    <div class="text-center">
        <h5>@_progressReport</h5>
    </div>
    
    <div style="display:@(Working ? "block":"none")">
        @_percents
        <div class="progress" style="margin:5px auto;width:420px;">
            <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: @_percents; height: 20px"></div>
        </div>
    </div>
</div>

@if (Database.GetErrorsCount() > 0)
{
<div class="text-center">
    <hr />
    <button @onclick="_ => Start(true)" disabled="@(Working)" type="button" class="btn btn-warning">Reload files from errors list</button>
    <p style="color:red">*All errors will be removed from the database</p> 
</div>
}

@code {

    private bool Working => _cts != null;
    private string _searchDir = string.Empty;
    private string _errorMessage = string.Empty;
    private string _progressReport = string.Empty;
    private string _percents = "0%";

    private CancellationTokenSource _cts = null;

    private async Task Start(bool fromErrors = false)
    {
        if (!fromErrors && !Directory.Exists(_searchDir))
        {
            _errorMessage = "Directory not exists";

            return;
        }

        if (Reader.IsWorking)
        {
            _errorMessage = "Import process already executing";
            return;
        }

        _errorMessage = string.Empty;
        _progressReport = string.Empty;

        var progress = new Progress<(int allImages, int addedImages, int errors)>(p => {
            if (Working)
            {
                _progressReport = $"Обработано {p.addedImages} файлов(а) из {p.allImages}. Ошибок: {p.errors}";
                _percents = Math.Round((double)p.addedImages / p.allImages * 100).ToString() + "%";
                StateHasChanged();
            }
        });

        _cts = new CancellationTokenSource();

        if (!fromErrors)
        {
            await Reader.Process(_searchDir, _cts.Token, progress).ConfigureAwait(false);
        }
        else
        {
            int errorsCount = Database.GetErrorsCount();
            var filesList = Database.GetErrors(0, errorsCount).Select(e => (e.FileNameFull, e.Id)).ToList();
            Database.DeleteErrors(filesList.Select(f => f.ImportExceptionInfoId).ToList());

            await Reader.Process(filesList.Select(f => f.FileNameFull).Distinct().ToList(), _cts.Token, progress).ConfigureAwait(false);
        }

        _cts?.Dispose();
        _cts = null;
        _errorMessage = string.Empty;
        _progressReport = string.Empty;
        _percents = "0%";
    }

    private void Cancel()
    {
        if(_cts != null)
        {
            _cts.Cancel();
            _cts.Dispose();
            _cts = null;

            _errorMessage = string.Empty;
            _progressReport = string.Empty;
            _percents = "0%";
            StateHasChanged();
        }
    }
}
